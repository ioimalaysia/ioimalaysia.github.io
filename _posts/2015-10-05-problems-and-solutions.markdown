---
layout: post
title: MCC 2015 Problems and Solutions
wordpress_id: 693
wordpress_url: http://ioimalaysia.org/?page_id=693
categories: []
tags: []
---
## Problems
Problems can be downloaded [here](https://drive.google.com/file/d/0B3MmeGMN3zNqcXMwYUVIYWlhVU0/view?usp=sharing).You can also submit your code to the official judge on the archived contest site [here](https://www.hackerrank.com/mcc-2015/).## Solutions
### Rectangle
We find the x-coordinate and y-coordinate of the fourth point separately. Observe that for any rectangle with sides parallel to the x and y axes, the corners can be split into two pairs, each pair with the same x-coordinate. We have the x-coordinates of three points, with two of them being the same. The fourth point's x-coordinate is the x-coordinate which is different. We can find the y-coordinate analogously. #### Python 3
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">fourth</span>(c1, c2, c3):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Returns the fourth coordinate given three others.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">if</span> c1 <span style="color: #666666">==</span> c2:        <span style="color: #008000; font-weight: bold">return</span> c3    <span style="color: #008000; font-weight: bold">elif</span> c1 <span style="color: #666666">==</span> c3:        <span style="color: #008000; font-weight: bold">return</span> c2    <span style="color: #008000; font-weight: bold">else</span>:        <span style="color: #008000; font-weight: bold">return</span> c1x1, y1 <span style="color: #666666">=</span> <span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split())x2, y2 <span style="color: #666666">=</span> <span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split())x3, y3 <span style="color: #666666">=</span> <span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split())x4 <span style="color: #666666">=</span> fourth(x1, x2, x3)y4 <span style="color: #666666">=</span> fourth(y1, y2, y3)<span style="color: #008000; font-weight: bold">print</span>(x4, y4)</pre></div>#### C++
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;iostream&gt;</span><span style="color: #008000; font-weight: bold">using</span> <span style="color: #008000; font-weight: bold">namespace</span> std;<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {<span style="color: #B00040">int</span> x[<span style="color: #666666">3</span>], y[<span style="color: #666666">3</span>];<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> <span style="color: #666666">3</span>; i<span style="color: #666666">++</span>) {cin <span style="color: #666666">&gt;&gt;</span> x[i] <span style="color: #666666">&gt;&gt;</span> y[i];}<span style="color: #B00040">int</span> ans_x, ans_y;<span style="color: #008000; font-weight: bold">if</span> (x[<span style="color: #666666">0</span>] <span style="color: #666666">==</span> x[<span style="color: #666666">1</span>]) ans_x <span style="color: #666666">=</span> x[<span style="color: #666666">2</span>];<span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (x[<span style="color: #666666">0</span>] <span style="color: #666666">==</span> x[<span style="color: #666666">2</span>]) ans_x <span style="color: #666666">=</span> x[<span style="color: #666666">1</span>];<span style="color: #008000; font-weight: bold">else</span> ans_x <span style="color: #666666">=</span> x[<span style="color: #666666">0</span>];<span style="color: #008000; font-weight: bold">if</span> (y[<span style="color: #666666">0</span>] <span style="color: #666666">==</span> y[<span style="color: #666666">1</span>]) ans_y <span style="color: #666666">=</span> y[<span style="color: #666666">2</span>];<span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (y[<span style="color: #666666">0</span>] <span style="color: #666666">==</span> y[<span style="color: #666666">2</span>]) ans_y <span style="color: #666666">=</span> y[<span style="color: #666666">1</span>];<span style="color: #008000; font-weight: bold">else</span> ans_y <span style="color: #666666">=</span> y[<span style="color: #666666">0</span>];cout <span style="color: #666666">&lt;&lt;</span> ans_x <span style="color: #666666">&lt;&lt;</span> <span style="color: #BA2121">&quot; &quot;</span> <span style="color: #666666">&lt;&lt;</span> ans_y <span style="color: #666666">&lt;&lt;</span> <span style="color: #BA2121">&#39;\n&#39;</span>;<span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;}</pre></div>&nbsp;### Complete the Equation
We can try all permutations of operators which are allowed. There are only 8 cases to consider, which we can enumerate by hand. We can further reduce to 6 cases by observing that ``a=b+c`` is equivalent to ``a-b=c``, and ``a=b*c`` is equivalent to ``a/b=c`` - however, this is not necessary.#### Python 3
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">a, b, c <span style="color: #666666">=</span> <span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split())<span style="color: #008000; font-weight: bold">if</span> a <span style="color: #666666">==</span> b <span style="color: #666666">+</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;+&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">==</span> b <span style="color: #666666">-</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;-&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">==</span> b <span style="color: #666666">*</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;*&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">==</span> b <span style="color: #666666">/</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">+</span> b <span style="color: #666666">==</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;+&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">-</span> b <span style="color: #666666">==</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;-&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">*</span> b <span style="color: #666666">==</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;*&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span><span style="color: #008000; font-weight: bold">elif</span> a <span style="color: #666666">/</span> b <span style="color: #666666">==</span> c:    op1 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/&#39;</span>    op2 <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;=&#39;</span><span style="color: #008000; font-weight: bold">else</span>:    <span style="color: #008000; font-weight: bold">raise</span> <span style="color: #D2413A; font-weight: bold">Exception</span>(<span style="color: #BA2121">&#39;No valid equation found.&#39;</span>)<span style="color: #008000">print</span>(<span style="color: #008000">str</span>(a) <span style="color: #666666">+</span> op1 <span style="color: #666666">+</span> <span style="color: #008000">str</span>(b) <span style="color: #666666">+</span> op2 <span style="color: #666666">+</span> <span style="color: #008000">str</span>(c))</pre></div>#### C++
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;bits/stdc++.h&gt;</span><span style="color: #B00040">int</span> a,b,c;<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {    scanf(<span style="color: #BA2121">&quot;%d %d %d&quot;</span>, <span style="color: #666666">&amp;</span>a, <span style="color: #666666">&amp;</span>b, <span style="color: #666666">&amp;</span>c);    <span style="color: #008000; font-weight: bold">if</span>(a<span style="color: #666666">+</span>b<span style="color: #666666">==</span>c) {        printf(<span style="color: #BA2121">&quot;%d+%d=%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">-</span>b<span style="color: #666666">==</span>c) {        printf(<span style="color: #BA2121">&quot;%d-%d=%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">*</span>b<span style="color: #666666">==</span>c) {        printf(<span style="color: #BA2121">&quot;%d*%d=%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">/</span>b<span style="color: #666666">==</span>c) {        printf(<span style="color: #BA2121">&quot;%d/%d=%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">==</span>b<span style="color: #666666">+</span>c) {        printf(<span style="color: #BA2121">&quot;%d=%d+%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">==</span>b<span style="color: #666666">-</span>c) {        printf(<span style="color: #BA2121">&quot;%d=%d-%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">==</span>b<span style="color: #666666">*</span>c) {        printf(<span style="color: #BA2121">&quot;%d=%d*%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (a<span style="color: #666666">==</span>b<span style="color: #666666">/</span>c) {        printf(<span style="color: #BA2121">&quot;%d=%d/%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, a, b, c);    } <span style="color: #008000; font-weight: bold">else</span> {        printf(<span style="color: #BA2121">&quot;NO VALID EQUATION FOUND</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);    }}</pre></div>&nbsp;### Bahasa F
We can do as the task statement says - the tricky part is the implementation.#### Python 3
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">f</span>(s):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Returns the translation of syllable s in Bahasa F.&quot;&quot;&quot;</span>    c <span style="color: #666666">=</span> first_consonant(s)    f_s <span style="color: #666666">=</span> s<span style="color: #666666">.</span>replace(c, <span style="color: #BA2121">&#39;f&#39;</span>, <span style="color: #666666">1</span>) <span style="color: #008000; font-weight: bold">if</span> c <span style="color: #008000; font-weight: bold">else</span> <span style="color: #BA2121">&#39;f&#39;</span> <span style="color: #666666">+</span> s    <span style="color: #008000; font-weight: bold">return</span> s <span style="color: #666666">+</span> f_s<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">first_consonant</span>(s):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Returns the first consonant (if exist) in syllable s.&quot;&quot;&quot;</span>    consonants <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;bcdfghjklmnpqrstvwxyz&#39;</span>    <span style="color: #008000; font-weight: bold">for</span> c <span style="color: #AA22FF; font-weight: bold">in</span> s:        <span style="color: #008000; font-weight: bold">if</span> c <span style="color: #AA22FF; font-weight: bold">in</span> consonants:            <span style="color: #008000; font-weight: bold">return</span> cwords <span style="color: #666666">=</span> <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split()<span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(words)):    word <span style="color: #666666">=</span> words[i]    syllables <span style="color: #666666">=</span> word<span style="color: #666666">.</span>split(<span style="color: #BA2121">&#39;/&#39;</span>)    <span style="color: #008000; font-weight: bold">for</span> j <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(syllables)):        syllable <span style="color: #666666">=</span> syllables[j]        syllables[j] <span style="color: #666666">=</span> f(syllable)    words[i] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;&quot;</span><span style="color: #666666">.</span>join(syllables)<span style="color: #008000">print</span>(<span style="color: #BA2121">&quot; &quot;</span><span style="color: #666666">.</span>join(words))</pre></div>#### C++
<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;iostream&gt;</span><span style="color: #BC7A00">#include &lt;cstdio&gt;</span><span style="color: #BC7A00">#include &lt;string&gt;</span><span style="color: #008000; font-weight: bold">using</span> <span style="color: #008000; font-weight: bold">namespace</span> std;<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {string S;getline(cin, S);string syllable, answer;S <span style="color: #666666">+=</span> <span style="color: #BA2121">&#39;/&#39;</span>;<span style="color: #B00040">int</span> consonant <span style="color: #666666">=</span> <span style="color: #666666">-1</span>;<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> S.size(); i<span style="color: #666666">++</span>) {<span style="color: #008000; font-weight: bold">if</span> (S[i] <span style="color: #666666">==</span> <span style="color: #BA2121">&#39;/&#39;</span> <span style="color: #666666">||</span> S[i] <span style="color: #666666">==</span> <span style="color: #BA2121">&#39; &#39;</span>) {answer <span style="color: #666666">+=</span> syllable;<span style="color: #008000; font-weight: bold">if</span> (consonant <span style="color: #666666">==</span> <span style="color: #666666">-1</span>) {syllable <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;f&#39;</span><span style="color: #666666">+</span>syllable;}<span style="color: #008000; font-weight: bold">else</span> {syllable[consonant] <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;f&#39;</span>;}answer <span style="color: #666666">+=</span> syllable;<span style="color: #008000; font-weight: bold">if</span> (S[i] <span style="color: #666666">==</span> <span style="color: #BA2121">&#39; &#39;</span>) {answer <span style="color: #666666">+=</span> <span style="color: #BA2121">&#39; &#39;</span>;}consonant <span style="color: #666666">=</span> <span style="color: #666666">-1</span>;syllable <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;&quot;</span>;}<span style="color: #008000; font-weight: bold">else</span> {syllable <span style="color: #666666">=</span> syllable <span style="color: #666666">+</span> S[i];<span style="color: #008000; font-weight: bold">if</span> (S[i] <span style="color: #666666">!=</span> <span style="color: #BA2121">&#39;a&#39;</span> <span style="color: #666666">&amp;&amp;</span> S[i] <span style="color: #666666">!=</span> <span style="color: #BA2121">&#39;e&#39;</span> <span style="color: #666666">&amp;&amp;</span> S[i] <span style="color: #666666">!=</span> <span style="color: #BA2121">&#39;i&#39;</span> <span style="color: #666666">&amp;&amp;</span> S[i] <span style="color: #666666">!=</span> <span style="color: #BA2121">&#39;o&#39;</span> <span style="color: #666666">&amp;&amp;</span> S[i] <span style="color: #666666">!=</span> <span style="color: #BA2121">&#39;u&#39;</span> <span style="color: #666666">&amp;&amp;</span> consonant <span style="color: #666666">==</span> <span style="color: #666666">-1</span>) {consonant <span style="color: #666666">=</span> syllable.size() <span style="color: #666666">-</span> <span style="color: #666666">1</span>;}}}cout <span style="color: #666666">&lt;&lt;</span> answer <span style="color: #666666">&lt;&lt;</span> <span style="color: #BA2121">&#39;\n&#39;</span>;<span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;}</pre></div>&nbsp;### Isthmus
A naive brute force solution tests whether each piece of land is a peak or valley. For each piece of land, we check the K pieces of land to its left and K pieces of land to its right to find out if it is a peak. There are N pieces of land to process, and 2*K pieces of land to be processed, resulting in an **O(NK)** algorithm. This will yield approximately 48% of the total score.To get full marks, we can observe that there is no need to continue processing the pieces of land if we have already determined that the piece of land in the center is neither a peak nor a valley. Then, for each peak/ valley, we will process O(2*K) = O(K) pieces of land, and for each of the 2*K pieces of land on the "slope" of the peak/valley we will only process the 2 adjacent pieces of land (after which we break the loop), summing up to O(2*2*K) = O(K) in total. The worst case is when we have a peak/valley in the middle which is formed by all N pieces of land, yielding an algorithm with run-time O(N+2*N) = **O(N)** . #### Python 3
**O(NK)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">strict_inc</span>(L):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if L is a stricly increasing sequence.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(L)<span style="color: #666666">-1</span>):        <span style="color: #008000; font-weight: bold">if</span> L[i] <span style="color: #666666">&gt;=</span> L[i<span style="color: #666666">+1</span>]:            <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">True</span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">strict_dec</span>(L):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if L is a stricly decreasing sequence.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(L)<span style="color: #666666">-1</span>):        <span style="color: #008000; font-weight: bold">if</span> L[i] <span style="color: #666666">&lt;=</span> L[i<span style="color: #666666">+1</span>]:            <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">True</span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">has_land</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if there is at least K pieces of land at both sides of i.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">return</span> i <span style="color: #666666">-</span> K <span style="color: #666666">&gt;=</span> <span style="color: #666666">0</span> <span style="color: #AA22FF; font-weight: bold">and</span> i <span style="color: #666666">+</span> K <span style="color: #666666">&lt;=</span> N<span style="color: #666666">-1</span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">is_peak</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if i is an order-K peak.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">return</span> has_land(i, K) <span style="color: #AA22FF; font-weight: bold">and</span> strict_inc(L[i<span style="color: #666666">-</span>K:i<span style="color: #666666">+1</span>]) <span style="color: #AA22FF; font-weight: bold">and</span> strict_dec(L[i:i<span style="color: #666666">+</span>K<span style="color: #666666">+1</span>])<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">is_valley</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if i is an order-K valley.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">return</span> has_land(i, K) <span style="color: #AA22FF; font-weight: bold">and</span> strict_dec(L[i<span style="color: #666666">-</span>K:i<span style="color: #666666">+1</span>]) <span style="color: #AA22FF; font-weight: bold">and</span> strict_inc(L[i:i<span style="color: #666666">+</span>K<span style="color: #666666">+1</span>])N <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())K <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())L <span style="color: #666666">=</span> <span style="color: #008000">list</span>(<span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split()))settlements <span style="color: #666666">=</span> <span style="color: #666666">0</span><span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(L)):    <span style="color: #008000; font-weight: bold">if</span> is_valley(i, K) <span style="color: #AA22FF; font-weight: bold">or</span> is_peak(i, K):        settlements <span style="color: #666666">+=</span> <span style="color: #666666">1</span><span style="color: #008000">print</span>(settlements)</pre></div>**O(N)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">has_land</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if there is at least K pieces of land at both sides of i.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">return</span> i <span style="color: #666666">-</span> K <span style="color: #666666">&gt;=</span> <span style="color: #666666">0</span> <span style="color: #AA22FF; font-weight: bold">and</span> i <span style="color: #666666">+</span> K <span style="color: #666666">&lt;=</span> N<span style="color: #666666">-1</span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">is_peak</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if i is an order-K peak.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> has_land(i, K):        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">for</span> j <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #666666">1</span>, K <span style="color: #666666">+</span> <span style="color: #666666">1</span>):        <span style="color: #008000; font-weight: bold">if</span> L[i <span style="color: #666666">+</span> j] <span style="color: #666666">&gt;=</span> L[i <span style="color: #666666">+</span> j <span style="color: #666666">-</span> <span style="color: #666666">1</span>] <span style="color: #AA22FF; font-weight: bold">or</span> L[i <span style="color: #666666">-</span> j] <span style="color: #666666">&gt;=</span> L[i <span style="color: #666666">-</span> j <span style="color: #666666">+</span> <span style="color: #666666">1</span>]:            <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">True</span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">is_valley</span>(i, K):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Checks if i is an order-K valley.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> has_land(i, K):        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">for</span> j <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #666666">1</span>, K <span style="color: #666666">+</span> <span style="color: #666666">1</span>):        <span style="color: #008000; font-weight: bold">if</span> L[i <span style="color: #666666">+</span> j] <span style="color: #666666">&lt;=</span> L[i <span style="color: #666666">+</span> j <span style="color: #666666">-</span> <span style="color: #666666">1</span>] <span style="color: #AA22FF; font-weight: bold">or</span> L[i <span style="color: #666666">-</span> j] <span style="color: #666666">&lt;=</span> L[i <span style="color: #666666">-</span> j <span style="color: #666666">+</span> <span style="color: #666666">1</span>]:            <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">False</span>    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000; font-weight: bold">True</span>N <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())K <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())L <span style="color: #666666">=</span> <span style="color: #008000">list</span>(<span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split()))settlements <span style="color: #666666">=</span> <span style="color: #666666">0</span><span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(L)):    <span style="color: #008000; font-weight: bold">if</span> is_valley(i, K) <span style="color: #AA22FF; font-weight: bold">or</span> is_peak(i, K):        settlements <span style="color: #666666">+=</span> <span style="color: #666666">1</span><span style="color: #008000">print</span>(settlements)</pre></div>#### C++
**O(NK)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;bits/stdc++.h&gt;</span><span style="color: #BC7A00">#define MAXN 1234567</span><span style="color: #B00040">int</span> n, k;<span style="color: #B00040">int</span> h[MAXN];<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {    scanf(<span style="color: #BA2121">&quot;%d %d&quot;</span>, <span style="color: #666666">&amp;</span>n, <span style="color: #666666">&amp;</span>k);    <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {        scanf(<span style="color: #BA2121">&quot;%d&quot;</span>, <span style="color: #666666">&amp;</span>h[i]);    }    <span style="color: #B00040">int</span> sol<span style="color: #666666">=0</span>;    <span style="color: #B00040">bool</span> valley, peak;    <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {<span style="color: #008000; font-weight: bold">if</span>(i<span style="color: #666666">+</span>k <span style="color: #666666">&gt;=</span> n <span style="color: #666666">||</span> i<span style="color: #666666">-</span>k <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>) <span style="color: #008000; font-weight: bold">continue</span>;        valley <span style="color: #666666">=</span> peak <span style="color: #666666">=</span> <span style="color: #008000">true</span>;        <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> j<span style="color: #666666">=1</span>;j<span style="color: #666666">&lt;=</span>k;j<span style="color: #666666">++</span>) {            <span style="color: #008000; font-weight: bold">if</span>(h[i<span style="color: #666666">+</span>j] <span style="color: #666666">&lt;=</span> h[i<span style="color: #666666">+</span>j<span style="color: #666666">-1</span>] <span style="color: #666666">||</span> h[i<span style="color: #666666">-</span>j] <span style="color: #666666">&lt;=</span> h[i<span style="color: #666666">-</span>j<span style="color: #666666">+1</span>] ) valley <span style="color: #666666">=</span> <span style="color: #008000">false</span>;            <span style="color: #008000; font-weight: bold">if</span>(h[i<span style="color: #666666">+</span>j] <span style="color: #666666">&gt;=</span> h[i<span style="color: #666666">+</span>j<span style="color: #666666">-1</span>] <span style="color: #666666">||</span> h[i<span style="color: #666666">-</span>j] <span style="color: #666666">&gt;=</span> h[i<span style="color: #666666">-</span>j<span style="color: #666666">+1</span>] ) peak <span style="color: #666666">=</span> <span style="color: #008000">false</span>;        }                <span style="color: #008000; font-weight: bold">if</span>(valley <span style="color: #666666">||</span> peak) sol<span style="color: #666666">++</span>;    }    printf(<span style="color: #BA2121">&quot;%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, sol);}</pre></div>**O(N)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;bits/stdc++.h&gt;</span><span style="color: #BC7A00">#define MAXN 1234567</span><span style="color: #B00040">int</span> n, k;<span style="color: #B00040">int</span> h[MAXN];<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {    scanf(<span style="color: #BA2121">&quot;%d %d&quot;</span>, <span style="color: #666666">&amp;</span>n, <span style="color: #666666">&amp;</span>k);    <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {        scanf(<span style="color: #BA2121">&quot;%d&quot;</span>, <span style="color: #666666">&amp;</span>h[i]);    }    <span style="color: #B00040">int</span> sol<span style="color: #666666">=0</span>;    <span style="color: #B00040">bool</span> valley, peak;    <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {    <span style="color: #008000; font-weight: bold">if</span>(i<span style="color: #666666">+</span>k <span style="color: #666666">&gt;=</span> n <span style="color: #666666">||</span> i<span style="color: #666666">-</span>k <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>) <span style="color: #008000; font-weight: bold">continue</span>;        valley <span style="color: #666666">=</span> peak <span style="color: #666666">=</span> <span style="color: #008000">true</span>;        <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> j<span style="color: #666666">=1</span>;j<span style="color: #666666">&lt;=</span>k;j<span style="color: #666666">++</span>) {            <span style="color: #008000; font-weight: bold">if</span>(h[i<span style="color: #666666">+</span>j] <span style="color: #666666">&lt;=</span> h[i<span style="color: #666666">+</span>j<span style="color: #666666">-1</span>] <span style="color: #666666">||</span> h[i<span style="color: #666666">-</span>j] <span style="color: #666666">&lt;=</span> h[i<span style="color: #666666">-</span>j<span style="color: #666666">+1</span>] ) valley <span style="color: #666666">=</span> <span style="color: #008000">false</span>;            <span style="color: #008000; font-weight: bold">if</span>(h[i<span style="color: #666666">+</span>j] <span style="color: #666666">&gt;=</span> h[i<span style="color: #666666">+</span>j<span style="color: #666666">-1</span>] <span style="color: #666666">||</span> h[i<span style="color: #666666">-</span>j] <span style="color: #666666">&gt;=</span> h[i<span style="color: #666666">-</span>j<span style="color: #666666">+1</span>] ) peak <span style="color: #666666">=</span> <span style="color: #008000">false</span>;            <span style="color: #008000; font-weight: bold">if</span>(<span style="color: #666666">!</span>valley <span style="color: #666666">&amp;&amp;</span> <span style="color: #666666">!</span>peak) <span style="color: #008000; font-weight: bold">break</span>; <span style="color: #408080; font-style: italic">// important line!</span>        }                <span style="color: #008000; font-weight: bold">if</span>(valley <span style="color: #666666">||</span> peak) sol<span style="color: #666666">++</span>;    }    printf(<span style="color: #BA2121">&quot;%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, sol);}</pre></div>&nbsp;### Chocolate Bars
The optimal strategy involves taking all adjacent pairs of chocolate bars in any order, since taking some adjacent pair of chocolate bars will never affect the possibility of taking some other pair. The straightforward solution involves scanning through the chocolate bars from left to right until a valid adjacent pair is found. Remove the pair from the list, and repeat the process until no valid adjacent pairs are found. This results in an **O(N<sup>2</sup>)** algorithm, yielding 50% of the total score.To improve the naive algorithm, we can observe that upon removing some adjacent pair, either i) a new pair form where the gap is or ii) the next pair is somewhere after the gap. Hence, there is no need to start from the left again. We can use a [stack](https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29) to simulate this process. We push all processed chocolate bars into the stack, and check if the incoming chocolate bar is the same size as the chocolate bar on the top of the stack. If so, we pop that chocolate bar. Otherwise, we push the incoming chocolate bar onto the stack. This results in an **O(N)** algorithm and full marks. #### Python 3
**O(N<sup>2</sup>)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">N <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())bars <span style="color: #666666">=</span> <span style="color: #008000">list</span>(<span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split()))<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">same_length</span>(bars):    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;Returns the first index i where bars[i] and bars[i+1] have the same length.&quot;&quot;&quot;</span>    <span style="color: #008000; font-weight: bold">for</span> i <span style="color: #AA22FF; font-weight: bold">in</span> <span style="color: #008000">range</span>(<span style="color: #008000">len</span>(bars)<span style="color: #666666">-1</span>):        <span style="color: #008000; font-weight: bold">if</span> bars[i] <span style="color: #666666">==</span> bars[i<span style="color: #666666">+1</span>]:            <span style="color: #008000; font-weight: bold">return</span> icnt <span style="color: #666666">=</span> <span style="color: #666666">0</span>i <span style="color: #666666">=</span> same_length(bars)<span style="color: #008000; font-weight: bold">while</span>(i <span style="color: #666666">!=</span> <span style="color: #008000; font-weight: bold">None</span>):    cnt <span style="color: #666666">+=</span> bars[i] <span style="color: #666666">+</span> bars[i<span style="color: #666666">+1</span>]    bars <span style="color: #666666">=</span> bars[:i] <span style="color: #666666">+</span> bars[i<span style="color: #666666">+2</span>:]    i <span style="color: #666666">=</span> same_length(bars)    <span style="color: #008000">print</span>(cnt)</pre></div>**O(N)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">N <span style="color: #666666">=</span> <span style="color: #008000">int</span>(<span style="color: #008000">input</span>())bars <span style="color: #666666">=</span> <span style="color: #008000">list</span>(<span style="color: #008000">map</span>(<span style="color: #008000">int</span>, <span style="color: #008000">input</span>()<span style="color: #666666">.</span>split()))cnt <span style="color: #666666">=</span> <span style="color: #666666">0</span>stack <span style="color: #666666">=</span> []<span style="color: #008000; font-weight: bold">for</span> bar <span style="color: #AA22FF; font-weight: bold">in</span> bars:    <span style="color: #008000; font-weight: bold">if</span> <span style="color: #008000">len</span>(stack) <span style="color: #AA22FF; font-weight: bold">and</span> stack[<span style="color: #666666">-1</span>] <span style="color: #666666">==</span> bar:        stack<span style="color: #666666">.</span>pop()        cnt <span style="color: #666666">+=</span> bar <span style="color: #666666">*</span> <span style="color: #666666">2</span>  <span style="color: #408080; font-style: italic"># take 2 adjacent bars</span>    <span style="color: #008000; font-weight: bold">else</span>:        stack<span style="color: #666666">.</span>append(bar)<span style="color: #008000">print</span>(cnt)</pre></div>#### C++
**O(N<sup>2</sup>)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;bits/stdc++.h&gt;</span><span style="color: #B00040">int</span> n, h[<span style="color: #666666">1000000</span>], done[<span style="color: #666666">1000000</span>];<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {    scanf(<span style="color: #BA2121">&quot;%d&quot;</span>, <span style="color: #666666">&amp;</span>n);    <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {        scanf(<span style="color: #BA2121">&quot;%d&quot;</span>, <span style="color: #666666">&amp;</span>h[i]);        done[i] <span style="color: #666666">=</span> <span style="color: #666666">0</span>;    }    <span style="color: #B00040">int</span> ans <span style="color: #666666">=</span> <span style="color: #666666">0</span>;    <span style="color: #B00040">int</span> j <span style="color: #666666">=</span> <span style="color: #666666">1</span>;    <span style="color: #008000; font-weight: bold">while</span>(j<span style="color: #666666">&lt;</span>n) { <span style="color: #408080; font-style: italic">// repeat until no adj pairs found</span>     <span style="color: #008000; font-weight: bold">for</span>(<span style="color: #B00040">int</span> i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>n;i<span style="color: #666666">++</span>) {            <span style="color: #008000; font-weight: bold">if</span>(done[i] <span style="color: #666666">==</span> <span style="color: #666666">1</span>) <span style="color: #008000; font-weight: bold">continue</span>;            j <span style="color: #666666">=</span> i<span style="color: #666666">+1</span>;            <span style="color: #008000; font-weight: bold">while</span>(done[j] <span style="color: #666666">==</span> <span style="color: #666666">1</span> <span style="color: #666666">&amp;&amp;</span> j<span style="color: #666666">&lt;</span>n) j<span style="color: #666666">++</span>;            <span style="color: #008000; font-weight: bold">if</span>(j<span style="color: #666666">==</span>n) <span style="color: #008000; font-weight: bold">break</span>;                    <span style="color: #008000; font-weight: bold">if</span>(h[i] <span style="color: #666666">==</span> h[j]) {                ans <span style="color: #666666">+=</span> <span style="color: #666666">2*</span>h[i];                done[i] <span style="color: #666666">=</span> <span style="color: #666666">1</span>;                done[j] <span style="color: #666666">=</span> <span style="color: #666666">1</span>;                <span style="color: #008000; font-weight: bold">break</span>;            }            }    }       printf(<span style="color: #BA2121">&quot;%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, ans);}</pre></div>**O(N)**<!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #BC7A00">#include &lt;iostream&gt;</span><span style="color: #BC7A00">#include &lt;stack&gt;</span><span style="color: #008000; font-weight: bold">using</span> <span style="color: #008000; font-weight: bold">namespace</span> std;<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {<span style="color: #B00040">int</span> n, h[<span style="color: #666666">1000000</span>];cin <span style="color: #666666">&gt;&gt;</span> n;<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> n; i<span style="color: #666666">++</span>) {cin <span style="color: #666666">&gt;&gt;</span> h[i];}stack<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">&gt;</span> cur;<span style="color: #B00040">long</span> <span style="color: #B00040">long</span> ans <span style="color: #666666">=</span> <span style="color: #666666">0</span>;<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> n; i<span style="color: #666666">++</span>) {<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>cur.empty() <span style="color: #666666">&amp;&amp;</span> cur.top() <span style="color: #666666">==</span> h[i]) {cur.pop();ans <span style="color: #666666">+=</span> <span style="color: #666666">2</span> <span style="color: #666666">*</span> h[i];}<span style="color: #008000; font-weight: bold">else</span> cur.push(h[i]);}cout <span style="color: #666666">&lt;&lt;</span> ans <span style="color: #666666">&lt;&lt;</span> <span style="color: #BA2121">&#39;\n&#39;</span>;<span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;}</pre></div>&nbsp;## Authors and Attributions
### Rectangle
Problem 1 from [COCI Contest 1, 2007-2008](http://hsin.hr/coci/archive/2007_2008/contest1_tasks.pdf)### Complete the Equation
Problem 1 from [COCI Contest 5, 2007-2008](http://hsin.hr/coci/archive/2007_2008/contest5_tasks.pdf)### Bahasa F
Chong Sher Minn, inspired by [Challenge #212](https://www.reddit.com/r/dailyprogrammer/comments/341c03/20150427_challenge_212_easy_r%C3%B6varspr%C3%A5ket/) of dailyprogrammer### Isthmus
Yew Jen Khai### Chocolate Bars
Lim Yun Kai&nbsp;Two other people submitted problem proposals: How Si Yu and Quah Fu Yong.Problems were curated by Justin Lim Kai Ze and Ong Shien Jin.
